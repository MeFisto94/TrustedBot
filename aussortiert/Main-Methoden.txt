//public static String serverID = "00000000";
//public static boolean textPerVoice = false;
public static HashMap<Integer, String> roleTokenNames = new HashMap<>();
public static HashMap<Integer, String> roleTokenTokens = new HashMap<>();
public static ArrayList<String> tfvBlacklist = new ArrayList<>();

Main-Methode:
//loadRoleTokens();
//loadTFVBlacklist();

//builder.addCommands(new AddTokenCommand(), new RemoveTokenCommand(), new TokensCommand(), new TokenCommand());

	in try:
	//jda.addEventListener(new MessageListener());
			/*if (textPerVoice) {
				jda.addEventListener(new ChannelListener());
				jda.addEventListener(new VoiceChannelListener());
				Methods.createAllTextPerVoice(jda);
			}*/
			
			//System.out.println("SERVERID: " + serverID);
			//System.out.println("TEXTCHANNEL PER VOICECHANNEL: " + textPerVoice);

			//Timer timer = new Timer();            // D,  H,    M,   S,   MS
			//timer.schedule(new ClearPostsHistory(), (7 * 24 * 60 * 60 * 1000), (7 * 24 * 60 * 60 * 1000));
			
createConfig():

				//cfg.set("ServerID", "00000000");
				//cfg.set("RoleTokens", Arrays.asList("0:NSFW:nsfw", "1:Administration:penis"));
				//cfg.set("TextForVoiceBlacklist", Arrays.asList("afk", "test"));
				//cfg.set("TextChatPerVoice", true);
				
				//serverID = cfg.getString("ServerID");
				//textPerVoice = cfg.getBoolean("TextChatPerVoice");
				
				
				
				
				
	/*public static void loadTFVBlacklist() {
		File configFile = new File("config.yml");
		YamlConfiguration yaml = new YamlConfiguration();
		try {
			Configuration cfg = yaml.load(configFile);
			tfvBlacklist = (ArrayList<String>) cfg.getStringList("TextForVoiceBlacklist");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public static void loadRoleTokens() {
		File configFile = new File("config.yml");
		YamlConfiguration yaml = new YamlConfiguration();
		try {
			Configuration cfg = yaml.load(configFile);
			ArrayList<String> singleTokens = (ArrayList<String>) cfg.getStringList("RoleTokens");
			for (String str : singleTokens) {
				String[] token = str.split(":");
				roleTokenNames.put(Integer.parseInt(token[0]), token[1]);
				roleTokenTokens.put(Integer.parseInt(token[0]), token[2]);
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public static void saveRoleTokens() {
		ArrayList<String> tokens = new ArrayList<>();
		for (Entry<Integer, String> ks : roleTokenNames.entrySet()) {
			if (!roleTokenTokens.containsKey(ks.getKey())) {
				roleTokenNames.remove(ks.getKey());
			}
			tokens.add(ks.getKey() + ":" + ks.getValue() + ":" + roleTokenTokens.get(ks.getKey()));
		}
		File configFile = new File("config.yml");
		YamlConfiguration yaml = new YamlConfiguration();
		try {
			Configuration cfg = yaml.load(configFile);
			cfg.set("RoleTokens", tokens);
			yaml.save(cfg, configFile);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}*/